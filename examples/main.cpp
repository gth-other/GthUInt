/*
 *  GthUInt
 *  Copyright (C) 2023 gth-other
 *
 *  GthUInt is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  GthUInt is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with GthUInt.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <cassert>
#include "../src/GthUInt.hpp"


void convertTest() {
    assert(GthUInt().getString() == "0");
    assert(GthUInt(3289298293989825).getString() == "3289298293989825");
    assert(GthUInt(18046982989529835498u).getString() == "18046982989529835498");
    assert(GthUInt("").getString() == "0");
    assert(GthUInt("5903904093").getString() == "5903904093");
    assert(GthUInt("990000000003492939834630923599238699826989398689289496386829598629893984689983469839692096938986021590389698206938969489930").getString() == "990000000003492939834630923599238699826989398689289496386829598629893984689983469839692096938986021590389698206938969489930");
    assert(GthUInt("0000004895092000003490529059035929863895892936092936929836892938969829869829398892896892896936982896989834689298639890092000003062030500000029989889998989888989900938592895988936").getString() == "4895092000003490529059035929863895892936092936929836892938969829869829398892896892896936982896989834689298639890092000003062030500000029989889998989888989900938592895988936");
}
void compareTest() {
    assert(GthUInt("9938958923958982983598298698998989829589") == GthUInt("9938958923958982983598298698998989829589"));
    assert(GthUInt("17") == GthUInt("17"));
    assert(GthUInt("32598081749032909834969286898926983989862939689828699823968892698") != GthUInt("32588081749032909834969286898926983989862939689828699823968892698"));
    assert(GthUInt("329589949698349692036903492903590369892809593986") != GthUInt("3295899496983496920369034929035903698928095939860"));
    assert(GthUInt("32858992939838698396983698469239689384968982") > GthUInt("32858992939838698396983698469239689384968981"));
    assert(GthUInt("32858992939898698396983698469239689384968982") > GthUInt("32858992939838698396983698469239689384978993"));
    assert(GthUInt("32858992939898698396983698469239689384968982") >= GthUInt("32858992939838698396983698469239689384978993"));
    assert(GthUInt("9938958923958982983598298698998989829589") >= GthUInt("9938958923958982983598298698998989829589"));
    assert(GthUInt("381") < GthUInt("512"));
    assert(GthUInt("90093509209609020936090930960930960909390690903709090909409") < GthUInt("100935092096090209360909309609309609090390690903709090909409"));
    assert(GthUInt("309598982398893649920033895893986983986949983986498986") < GthUInt("409598982398893649920033895893986983986949983986498987"));
    assert(GthUInt("309598982398893649920033895893986983986949983986498986") <= GthUInt("409598982398893649920033895893986983986949983986498987"));
    assert(GthUInt("9938958923958982983598298698998989829589") <= GthUInt("9938958923958982983598298698998989829589"));
}
void sumTest() {
    assert(GthUInt("678") + GthUInt("9589298") == GthUInt("9589976"));
    assert(GthUInt("23989059230950904000230953904699022896389986892983689984698329869828968939826493289662368928968926") + GthUInt("3989894969838949898298698983469982893689893289968982893689") == GthUInt("23989059230950904000230953904699022896393976787953528934596628568812438922720183182952337911862615"));
    assert(GthUInt("9823895982893869982389689289698298839698236898929839868928968926893689") + GthUInt("238429") == GthUInt("9823895982893869982389689289698298839698236898929839868928968927132118"));
    assert(GthUInt("238592395989423985899283985892893899823985898998235982389689238959828936899823896899823986538") + GthUInt("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999990000000000000000000000000000000000000000001") == GthUInt("100000000000000000000000000000000000000000000000000000000000000000000000000000000000238592395989423985899283985892893899823985898998225982389689238959828936899823896899823986539"));
    assert(GthUInt("23895982390523062039623903096903400694396009239509309790241209509125912959120965923906934683940295309834693059029306902339060235909236929360320962390523906378039608239052306823092152092359010909402935023523952936192059023509548923985892398598289369891924892389582982350923992359823598523") + GthUInt("247723888723487238757823732785278362357823875234762896489346783896893984683769436983486738967898364983467889235787846781892487912395893298652689583501257329852938571049359828589182528957913523582835927395879235892358935789897238958972355328235") == GthUInt("23895982390523062039623903096903400694396009487233198513728448266949645744399328281730809918703191799181476955923291586108497219395975897258685945858413142165886390131540219218985450745048594410660264876462523985551887612692077881899415981434216765771160784748518772248162951332178926758"));
}
void subtractTest() {
    assert(GthUInt("99835988952983985892396983825298929358943600000003289689296923068928963982") - GthUInt("909099049090900909094030690") == GthUInt("99835988952983985892396983825298929358943599999094190640206022159834933292"));
    assert(GthUInt("39050290359009320909093209690390460930909640904070990099009090900000009") - GthUInt("999999999999") == GthUInt("39050290359009320909093209690390460930909640904070990099008090900000010"));
    assert(GthUInt("92958929389892389689289368989238968989438926898934689982389698328968989283968926") - GthUInt("92958929389892389689289368989238968989438926898934689982389698328968989283968925") == GthUInt("1"));
    assert(GthUInt("2958929389892389689289368989238968989438926898934689982389698328968989283968926") - GthUInt("2958929389892389689289368989238968989438926898934689982389698328968989283968926") == GthUInt("0"));
    assert(GthUInt("489988949693689389469898364868998349868893469496093468993046909039469039040690900983640099043968390864908909394906490900389489893698496893968884896743968983483693848934868872896898987935983689287689325463463464643626462644626424626462466426") - GthUInt("33259889238958923989892539893869982198589389289893689896389892389896892896326398923638968629263") == GthUInt("489988949693689389469898364868998349868893469496093468993046909039469039040690900983640099043968390864908909394906490900389489893698496893968884863484079744524769859042328979026916789346594399393999429073571074746733566318227500987493837163"));
}
void multiplyTest() {
    assert(GthUInt("90309509209329090095390992838968729332995832895982000000000000023895823985892389") * GthUInt("3248298398589982389589984389896898936898923988968238689923896892389689892893896892398689298398689238969832896988293698238968928939868923896892390638969889238968982938968923896892893862893869982389689238968928936") == GthUInt("293352234142110950057674907576881010430248688831689943760211917002683458371724626252995474516412363010550642337193760753741528163383782597054251601649439194962729339392044532972051465822628269904869861436824625001252040848444503126483117381562620074476630431225061472964881128903573484268104"));
    assert(GthUInt("30959002390590239060929039069029039069023906909023906909023906092903960902390690290360990239069023906") * GthUInt("3959238958989389589238989589893895299823985982985893") == GthUInt("122574088396270521763038560532359436062826424415335264584130149714008814664327152931491597639552046570676102189272630400116431739158590072733362877758058"));
    assert(GthUInt("3909390590239090509239059002930950929035909203590902390590239090509290539029053") * GthUInt("7") == GthUInt("27365734131673633564673413020516656503251364425136316734131673633565033773203371"));
    assert(GthUInt("0") * GthUInt("323598298368998289369882983969898389698289368998389698892389689982389689239868928938962") == GthUInt("0"));
    assert(GthUInt("23895982390523062039623903096903400694396009239509309790241209509125912959120965923906934683940295309834693059029306902339060235909236929360320962390523906378039608239052306823092152092359010909402935023523952936192059023509548923985892398598289369891924892389582982350923992359823598523") * GthUInt("247723888723487238757823732785278362357823875234762896489346783896893984683769436983486738967898364983467889235787846781892487912395893298652689583501257329852938571049359828589182528957913523582835927395879235892358935789897238958972355328235") == GthUInt("5919605682648345599245953437007761616292632566211566090392940548995124909811013030427415359981011148912312779849654897016395904284274033608877110997864045780990280203489046374692895207697652502425272404595348522028669648257050533868692787558615638949392749775989474827386966821836860780329715965751784050858024586389812029633687679659431167277327265151636118454413281118268488499257388408284240616313749035510927575358615584846312726957535216714367782221754781719788679444876466589315422626238490293403236796159766402530526196905"));
}
void divmodTest() {
    assert(GthUInt::divmod(GthUInt("395928395899238895892389589928389589289358989239858923898958923988958932895892899958832598898398589289358928939328958928395"), GthUInt("3295892389589283958998238958989899898990")) == std::make_pair(GthUInt("120127828551033889200796554340873382886276009068033182646183365819806465199486006046"), GthUInt("749285479556967968098041286475029634855")));
    assert(GthUInt::divmod(GthUInt("98249498892141829985899285898989329858928998589289398589289389892985389529898329858925983"), GthUInt("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")) == std::make_pair(GthUInt("0"), GthUInt("98249498892141829985899285898989329858928998589289398589289389892985389529898329858925983")));
    assert(GthUInt::divmod(GthUInt("89398258989358929835899000328959839859829835899825983589"), GthUInt("310")) == std::make_pair(GthUInt("288381480610835257535158065577289805999451083547825753"), GthUInt("159")));
    assert(GthUInt::divmod(GthUInt("1000000000000000000000000000000000000000000000000000000000000000000000000000"), GthUInt("10")) == std::make_pair(GthUInt("100000000000000000000000000000000000000000000000000000000000000000000000000"), GthUInt("0")));
}
void powTest() {
    assert(GthUInt::pow(GthUInt("9829359898224532352352352352352353598"), 0) == GthUInt("1"));
    assert(GthUInt::pow(GthUInt("983589289358923299999919191919919191919919191919"), 1) == GthUInt("983589289358923299999919191919919191919919191919"));
    assert(GthUInt::pow(GthUInt("13"), 1000) == GthUInt("8777125472973511649630750050295188683351430110097915876250894978429797369155961290321829625004920141758416719066805645579710744290541337680113772670040386863849283653078324415471816788604945889094925784900885812724984087843737442111926413818245854362613018058774368703971604921858023116665586358870612944209398056562604561248859926344335598822815885851096698226775053153403320782439987679978321289537645645163767251396759519805603090332694449553371530571613352311006350058217982509738362083094920649452123351717366337410243853659113315547584871655479914439219520157174729130746351059075207407866012574386726064196992865627149566238044625779078186624347183905913357718850537058578084932880569701242598663149911276357125355850792073635533676541250531086757377369962506979378337216411188347761901006460813413505861461267545723590468627854202034450569581626648934062198718362303420281555886394558137408159453103395918783625713213314350531051312551733021627153081075080140680608080529736975658786227362251632725009435866547613598753584705455955419696609282059191031962604169242974038517575645939316377801594539335940001"));
}
void factorialTest() {
    assert(GthUInt::factorial(0) == GthUInt("1"));
    assert(GthUInt::factorial(1) == GthUInt("1"));
    assert(GthUInt::factorial(2) == GthUInt("2"));
    assert(GthUInt::factorial(3) == GthUInt("6"));
    assert(GthUInt::factorial(237) == GthUInt("297976905673664935047816526719560179419093566446241572177911873782676338657629325036120150027567927385041320207173776316112533845790828129808740140341588672218544752564381505087410826234304248359063246670539274917998749482684890734236332214086176076308821914543172491163329091874698705047455860455252985775559487256924098658333601938809292553392248924659865897822485158978199509626479821986381518730166272000000000000000000000000000000000000000000000000000000000"));
}
int main() {
    convertTest();
    compareTest();
    sumTest();
    subtractTest();
    multiplyTest();
    divmodTest();
    powTest();
    factorialTest();

    GthUInt a = GthUInt::factorial(10000);
    uint64_t ctr = 0;
    std::cout << "Checking number " << a << "..." << std::endl;
    for (; ;) {
        if (a.even()) {
            a = GthUInt::divmod(a, 2).first;
        }
        else {
            a = 3 * a + 1;
        }
        ctr = ctr + 1;
        if (a == 4) {
            break;
        }
    }
    std::cout << "In cycle 4-2-1 after " << ctr << " iterations" << std::endl;

    return 0;
}